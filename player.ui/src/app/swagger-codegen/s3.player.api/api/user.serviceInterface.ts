/*
Crucible
Copyright 2020 Carnegie Mellon University.
NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
Released under a MIT (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
[DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see Copyright notice for non-US Government use and distribution.
Carnegie Mellon® and CERT® are registered in the U.S. Patent and Trademark Office by Carnegie Mellon University.
DM20-0181
*/

/**
 * Scenario Player API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';


import { ApiError } from '../model/apiError';
import { Notification } from '../model/notification';
import { User } from '../model/user';


import { Configuration }                                     from '../configuration';


export interface UserServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Adds a User to a Team
    * Adds the specified User to the specified Team  &lt;para /&gt;  Accessible to a SuperUser, or a User on an Admin Team within the Team&#39;s Exercise
    * @param teamId The id of the Team
    * @param userId The id of the User
    */
    addUserToTeam(teamId: string, userId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Sends a new User Notification
    * Accessible only to a SuperUser or a User on an Admin User within the specified Exercise
    * @param exerciseId The id of the Exercise
    * @param userId The id of the User
    * @param incomingData 
    */
    broadcastToUser(exerciseId: string, userId: string, incomingData?: Notification, extraHttpRequestParams?: any): Observable<string>;

    /**
    * Creates a new User
    * Creates a new User with the attributes specified  &lt;para /&gt;  Accessible only to a SuperUser
    * @param user The data to create the User with
    */
    createUser(user?: User, extraHttpRequestParams?: any): Observable<User>;

    /**
    * Deletes a User
    * Deletes the User with the specified id  &lt;para /&gt;  Accessible only to a SuperUser
    * @param id The id of the User to delete
    */
    deleteUser(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Gets all Users for an Exercise
    * Returns all Users within a specific Exercise  &lt;para /&gt;  Accessible to a SuperUser or a User on an Admin Team within that Exercise
    * @param id The id of the Exercise
    */
    getExerciseUsers(id: string, extraHttpRequestParams?: any): Observable<Array<User>>;

    /**
    * Gets all Users for a Team
    * Returns all Users within a specific Team  &lt;para /&gt;  Accessible to a SuperUser, a User on an Admin Team within the Team&#39;s Exercise, or other members of the Team
    * @param id The id of the Team
    */
    getTeamUsers(id: string, extraHttpRequestParams?: any): Observable<Array<User>>;

    /**
    * Gets a specific User by id
    * Returns the User with the id specified  &lt;para /&gt;  Accessible to a SuperUser, a User on an Admin Team within any of the specified Users&#39; Exercises, or a User that shares any Teams with the specified User
    * @param id The id of the User
    */
    getUser(id: string, extraHttpRequestParams?: any): Observable<User>;

    /**
    * Gets all Users in the system
    * Returns a list of all of the Users in the system.  &lt;para /&gt;  Only accessible to a SuperUser
    */
    getUsers(extraHttpRequestParams?: any): Observable<Array<User>>;

    /**
    * Removes a User from a Team
    * Removes the specified User from the specified Team  &lt;para /&gt;  Accessible to a SuperUser, or a User on an Admin Team within the Team&#39;s Exercise
    * @param teamId The id of the Team
    * @param userId The id of the User
    */
    removeUserFromTeam(teamId: string, userId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Updates a User
    * Updates a User with the attributes specified  &lt;para /&gt;  Accessible only to a SuperUser
    * @param id The Id of the User to update
    * @param user The updated User values
    */
    updateUser(id: string, user?: User, extraHttpRequestParams?: any): Observable<User>;

}

