/*
Crucible
Copyright 2020 Carnegie Mellon University.
NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
Released under a MIT (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
[DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see Copyright notice for non-US Government use and distribution.
Carnegie Mellon® and CERT® are registered in the U.S. Patent and Trademark Office by Carnegie Mellon University.
DM20-0181
*/

/**
 * Scenario Player API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';


import { ApiError } from '../model/apiError';
import { Permission } from '../model/permission';
import { PermissionForm } from '../model/permissionForm';


import { Configuration }                                     from '../configuration';


export interface PermissionServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Adds a Permission to a Role
    * Adds the specified Permission to the specified Role  &lt;para /&gt;  Accessible only to a SuperUser
    * @param roleId The id of the Role
    * @param permissionId The id of the Permission
    */
    addPermissionToRole(roleId: string, permissionId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Adds a Permission to a Team
    * Adds the specified Permission to the specified Team  &lt;para /&gt;  Accessible to a SuperUser or an Exercise Admin of the Exercise the Team is part of
    * @param teamId The id of the Team
    * @param permissionId The id of the Permission
    */
    addPermissionToTeam(teamId: string, permissionId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Adds a Permission to a User
    * Adds the specified Permission to the specified User  &lt;para /&gt;  Accessible only to a SuperUser
    * @param userId The id of the User
    * @param permissionId The id of the Permission
    */
    addPermissionToUser(userId: string, permissionId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Creates a new Permission
    * Creates a new Permission with the attributes specified  &lt;para /&gt;  An Permission is a top-level resource that can optionally be the parent of an Exercise specific Application resource, which would inherit it&#39;s properties  &lt;para /&gt;  Accessible only to a SuperUser
    * @param form 
    */
    createPermission(form?: PermissionForm, extraHttpRequestParams?: any): Observable<Permission>;

    /**
    * Deletes an Permission
    * Deletes a Permission with the specified id  &lt;para /&gt;  Accessible only to a SuperUser
    * @param id The id of the Permission to delete
    */
    deletePermission(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Gets a specific Permission by id
    * Returns the Permission with the id specified  &lt;para /&gt;  Accessible to all authenticated Users
    * @param id The id of the Permission
    */
    getPermission(id: string, extraHttpRequestParams?: any): Observable<Permission>;

    /**
    * Gets all Permissions in the system
    * Returns a list of all of the Permissions in the system.  &lt;para /&gt;  Only accessible to a SuperUser
    */
    getPermissions(extraHttpRequestParams?: any): Observable<Array<Permission>>;

    /**
    * Gets a User&#39;s permissions for an Exercise
    * Returns a list of all of the Permissions for the User on this Exercise  &lt;para /&gt;  If the User is a member of the Exercise, this will first use any Permissions on their Primary Team Membership, and then apply any Permissions on the Team itself.  If the User is not a member of the Exercise, the User&#39;s top level Permissions will be returned.
    * @param exerciseId 
    * @param userId 
    */
    getUserExercisePermissions(exerciseId: string, userId: string, extraHttpRequestParams?: any): Observable<Array<Permission>>;

    /**
    * Gets a User&#39;s permissions for the Exercise a given Team is part of
    * Returns a list of all of the Permissions for the User on the Exercise that the specified Team belongs to  &lt;para /&gt;  If the User is a member of the Exercise, this will first use any Permissions on their Primary Team Membership, and then apply any Permissions on the Team itself.  If the User is not a member of the Exercise, the User&#39;s top level Permissions will be returned.
    * @param teamId 
    * @param userId 
    */
    getUserExercisePermissionsByTeam(teamId: string, userId: string, extraHttpRequestParams?: any): Observable<Array<Permission>>;

    /**
    * Removes a Permission from a Role
    * Removes the specified Permission from the specified Role  &lt;para /&gt;  Accessible only to a SuperUser
    * @param roleId The id of the Role
    * @param permissionId The id of the Permission
    */
    removePermissionFromRole(roleId: string, permissionId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Removes a Permission from a Team
    * Removes the specified Permission from the specified Team  &lt;para /&gt;  Accessible to a SuperUser or an Exercise Admin of the Exercise the Team is part of
    * @param teamId The id of the Team
    * @param permissionId The id of the Permission
    */
    removePermissionFromTeam(teamId: string, permissionId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Removes a Permission from a User
    * Removes the specified Permission from the specified User  &lt;para /&gt;  Accessible only to a SuperUser
    * @param userId The id of the User
    * @param permissionId The id of the Permission
    */
    removePermissionFromUser(userId: string, permissionId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Updates a Permission
    * Updates a Permission with the attributes specified  &lt;para /&gt;  Accessible only to a SuperUser
    * @param id 
    * @param form 
    */
    updatePermission(id: string, form?: PermissionForm, extraHttpRequestParams?: any): Observable<Permission>;

}

