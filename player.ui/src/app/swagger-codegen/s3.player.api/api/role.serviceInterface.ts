/*
Crucible
Copyright 2020 Carnegie Mellon University.
NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
Released under a MIT (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
[DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see Copyright notice for non-US Government use and distribution.
Carnegie Mellon® and CERT® are registered in the U.S. Patent and Trademark Office by Carnegie Mellon University.
DM20-0181
*/

/**
 * Scenario Player API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';


import { ApiError } from '../model/apiError';
import { Role } from '../model/role';
import { RoleForm } from '../model/roleForm';


import { Configuration }                                     from '../configuration';


export interface RoleServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Creates a new Role
    * Creates a new Role with the attributes specified  &lt;para /&gt;  An Role is a top-level resource that can optionally be the parent of an Exercise specific Application resource, which would inherit it&#39;s properties  &lt;para /&gt;  Accessible only to a SuperUser
    * @param form 
    */
    createRole(form?: RoleForm, extraHttpRequestParams?: any): Observable<Role>;

    /**
    * Deletes an Role
    * Deletes a Role with the specified id  &lt;para /&gt;  Accessible only to a SuperUser
    * @param id The id of the Role to delete
    */
    deleteRole(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Gets a specific Role by id
    * Returns the Role with the id specified  &lt;para /&gt;  Accessible to all authenticated Users
    * @param id The id of the Role
    */
    getRole(id: string, extraHttpRequestParams?: any): Observable<Role>;

    /**
    * Gets all Roles in the system
    * Returns a list of all of the Roles in the system.  &lt;para /&gt;  Only accessible to a SuperUser
    */
    getRoles(extraHttpRequestParams?: any): Observable<Array<Role>>;

    /**
    * Updates a Role
    * Updates a Role with the attributes specified  &lt;para /&gt;  Accessible only to a SuperUser
    * @param id 
    * @param form 
    */
    updateRole(id: string, form?: RoleForm, extraHttpRequestParams?: any): Observable<Role>;

}

