/*
Crucible
Copyright 2020 Carnegie Mellon University.
NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
Released under a MIT (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
[DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see Copyright notice for non-US Government use and distribution.
Carnegie Mellon(R) and CERT(R) are registered in the U.S. Patent and Trademark Office by Carnegie Mellon University.
DM20-0181
*/

/**
 * Scenario Player API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';


import { ApiError } from '../model/apiError';
import { Exercise } from '../model/exercise';
import { Notification } from '../model/notification';


import { Configuration }                                     from '../configuration';


export interface ExerciseServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Sends a new Exercise Notification
    * Creates a new Exercise within an Exercise with the attributes specified  &lt;para /&gt;  Accessible only to a SuperUser or a User on an Admin Exercise within the specified Exercise
    * @param id The id of the Exercise
    * @param incomingData 
    */
    broadcastToExercise(id: string, incomingData?: Notification, extraHttpRequestParams?: any): Observable<string>;

    /**
    * Creates a new Exercise
    * Creates a new Exercise with the attributes specified  &lt;para /&gt;  Accessible only to a SuperUser or an Administrator
    * @param exercise The data to create the Exercise with
    */
    createExercise(exercise?: Exercise, extraHttpRequestParams?: any): Observable<Exercise>;

    /**
    * Deletes an Exercise
    * Deletes an Exercise with the specified id  &lt;para /&gt;  Accessible only to a SuperUser or a User on an Admin Team within the specified Exercise
    * @param id The id of the Exercise to delete
    */
    deleteExercise(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Gets a specific Exercise by id
    * Returns the Exercise with the id specified  &lt;para /&gt;  Accessible to a SuperUser or a User that is a member of a Team within the specified Exercise
    * @param id The id of the Exercise
    */
    getExercise(id: string, extraHttpRequestParams?: any): Observable<Exercise>;

    /**
    * Gets all Exercise in the system
    * Returns a list of all of the Exercises in the system.  &lt;para /&gt;  Only accessible to a SuperUser
    */
    getExercises(extraHttpRequestParams?: any): Observable<Array<Exercise>>;

    /**
    * Gets all Exercises for the current User
    * Returns all Exercises where the current User is a member of at least one of it&#39;s Teams  &lt;para /&gt;  Accessible only to the current User.  &lt;para /&gt;  This is a convenience endpoint and simply returns a 302 redirect to the fully qualified users/{id}/exercises endpoint
    */
    getMyExercises(extraHttpRequestParams?: any): Observable<Array<Exercise>>;

    /**
    * Gets all Exercises for a User
    * Returns all Exercises where the specified User is a member of at least one of it&#39;s Teams  &lt;para /&gt;  Accessible to a SuperUser or the specified User itself
    * @param id 
    */
    getUserExercises(id: string, extraHttpRequestParams?: any): Observable<Array<Exercise>>;

    /**
    * Updates an Exercise
    * Updates an Exercise with the attributes specified  &lt;para /&gt;  Accessible only to a SuperUser or a User on an Admin Team within the specified Exercise
    * @param id The Id of the Exericse to update
    * @param exercise The updated Exercise values
    */
    updateExercise(id: string, exercise?: Exercise, extraHttpRequestParams?: any): Observable<Exercise>;

}

